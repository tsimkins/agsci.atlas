<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
    xmlns:five="http://namespaces.zope.org/five"
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:plone="http://namespaces.plone.org/plone"
    xmlns:i18n="http://namespaces.zope.org/i18n"
    i18n_domain="agsci.atlas">

    <include package=".notifications" />

    <!-- Do "something" when workflow action succeeds for an article -->

    <subscriber
        for="..content.article.IArticle Products.CMFCore.interfaces.IActionSucceededEvent"
        handler=".editing.onProductPublish"
        />

    <!-- Do "something" when an event is created -->

    <subscriber
        for="..content.event.IEvent zope.lifecycleevent.IObjectCreatedEvent"
        handler=".event.onEventCreate"
        />

    <!-- Do "something" when a CventEvent workflow state changes -->

    <subscriber
        for="..content.event.cvent.ICventEvent Products.CMFCore.interfaces.IActionSucceededEvent"
        handler=".event.onCventImport"
        />

    <subscriber
        for="..content.event.cvent.ICventEvent .interfaces.IAtlasImportEvent"
        handler=".event.onCventImport"
        />

    <!-- Do "something" when an Online Course is imported -->

    <subscriber
        for="..content.online_course.IOnlineCourse .interfaces.IAtlasImportEvent"
        handler=".online_course.onOnlineCourseImport"
        />

    <!-- Do "something" when an Online Course Group is modified -->

    <subscriber
        for="..content.online_course.group.IOnlineCourseGroup zope.lifecycleevent.IObjectModifiedEvent"
        handler=".online_course.onOnlineCourseGroupEdit"
        />

    <!-- Do "something" when a product is created or edited -->

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.IObjectCreatedEvent"
        handler=".onProductCreateEdit"
        />

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.IObjectModifiedEvent"
        handler=".onProductCreateEdit"
        />

    <!-- Do "something" when a product is published -->

    <subscriber
        for="..content.IAtlasProduct Products.DCWorkflow.interfaces.IBeforeTransitionEvent"
        handler=".onProductWorkflow"
        />

    <!-- Do "something" when a product is published -->

    <subscriber
        for="..content.IAtlasProduct Products.DCWorkflow.interfaces.IBeforeTransitionEvent"
        handler=".onProductReview"
        />

    <!--
        If content is added, removed, moved (renamed) or edited, unpublish the
        parent product.
    -->

    <!-- Products -->

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.interfaces.IObjectRemovedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IAtlasProduct zope.lifecycleevent.interfaces.IObjectMovedEvent"
        handler=".editing.onProductCRUD"
        />

    <!-- Products with EPAS -->

    <subscriber
        for="..content.behaviors.IAtlasEPASMetadata zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.setPrimaryEPASTeam"
        />

    <subscriber
        for="..content.behaviors.IAtlasEPASMetadata zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.setPrimaryEPASTeam"
        />


    <!-- Types inside products -->

    <subscriber
        for="..content.IArticleDexterityContent zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IArticleDexterityContent zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IArticleDexterityContent zope.lifecycleevent.interfaces.IObjectRemovedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="..content.IArticleDexterityContent zope.lifecycleevent.interfaces.IObjectMovedEvent"
        handler=".editing.onProductCRUD"
        />

    <!-- Images -->

    <subscriber
        for="plone.app.contenttypes.interfaces.IImage zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IImage zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IImage zope.lifecycleevent.interfaces.IObjectRemovedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IImage zope.lifecycleevent.interfaces.IObjectMovedEvent"
        handler=".editing.onProductCRUD"
        />

    <!-- Files -->

    <subscriber
        for="plone.app.contenttypes.interfaces.IFile zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IFile zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IFile zope.lifecycleevent.interfaces.IObjectRemovedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.IFile zope.lifecycleevent.interfaces.IObjectMovedEvent"
        handler=".editing.onProductCRUD"
        />

    <!-- Links -->

    <subscriber
        for="plone.app.contenttypes.interfaces.ILink zope.lifecycleevent.interfaces.IObjectModifiedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.ILink zope.lifecycleevent.interfaces.IObjectAddedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.ILink zope.lifecycleevent.interfaces.IObjectRemovedEvent"
        handler=".editing.onProductCRUD"
        />

    <subscriber
        for="plone.app.contenttypes.interfaces.ILink zope.lifecycleevent.interfaces.IObjectMovedEvent"
        handler=".editing.onProductCRUD"
        />

    <!-- Add an editors group and assign roles for Category Levels 1 and 2 -->

    <subscriber
        for="..content.structure.ICategoryLevel1 zope.lifecycleevent.IObjectAddedEvent"
        handler=".category.onCategoryCreate"
        />

    <subscriber
        for="..content.structure.ICategoryLevel2 zope.lifecycleevent.IObjectAddedEvent"
        handler=".category.onCategoryCreate"
        />

    <!-- When a category is edited, reindex any positioned products -->

    <subscriber
        for="..content.behaviors.IProductPositions zope.lifecycleevent.IObjectModifiedEvent"
        handler=".category.reindexProductPosition"
        />

    <!-- For learn now videos, grab a lead image from YouTube if none is populated -->
    <subscriber
        for="..content.video.IVideo zope.lifecycleevent.IObjectModifiedEvent"
        handler=".video.onVideoSave"
        />

    <subscriber
        for="..content.video.IVideo zope.lifecycleevent.IObjectAddedEvent"
        handler=".video.onVideoSave"
        />

    <!-- For items that have an optional video (e.g. Workshop Group), grab a
         lead image from YouTube if none is populated -->

    <subscriber
        for="..content.behaviors.IOptionalVideo zope.lifecycleevent.IObjectModifiedEvent"
        handler=".video.onVideoSave"
        />

    <subscriber
        for="..content.behaviors.IOptionalVideo zope.lifecycleevent.IObjectAddedEvent"
        handler=".video.onVideoSave"
        />


    <!-- Do "something" when a product with a location is created or edited -->

    <subscriber
        for="..content.behaviors.IAtlasLocation zope.lifecycleevent.IObjectCreatedEvent"
        handler=".location.onLocationProductCreateEdit"
        />

    <subscriber
        for="..content.behaviors.IAtlasLocation zope.lifecycleevent.IObjectModifiedEvent"
        handler=".location.onLocationProductCreateEdit"
        />


    <!-- For events, set the expiration date when they're modified or created. -->

    <subscriber
        for="..content.event.IEvent zope.lifecycleevent.IObjectCreatedEvent"
        handler=".event.setExpirationDate"
        />

    <subscriber
        for="..content.event.IEvent zope.lifecycleevent.IObjectModifiedEvent"
        handler=".event.setExpirationDate"
        />

    <!-- Reindexes children of event / online course group when parent is modified -->

    <subscriber
        for="..content.event.group.IEventGroup zope.lifecycleevent.IObjectModifiedEvent"
        handler=".event.onParentGroupUpdate"
        />

    <subscriber
        for="..content.online_course.group.IOnlineCourseGroup zope.lifecycleevent.IObjectModifiedEvent"
        handler=".event.onParentGroupUpdate"
        />

</configure>
